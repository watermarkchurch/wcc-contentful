# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/erb_lint/all/erb_lint.rbi
#
# erb_lint-0.0.29
module ERBLint
end
class ERBLint::Corrector
  def corrected_content; end
  def corrections; end
  def corrector; end
  def diagnostics; end
  def initialize(processed_source, offenses); end
  def offenses; end
  def processed_source; end
end
class ERBLint::FileLoader
  def base_path; end
  def initialize(base_path); end
  def read_content(filename); end
  def yaml(filename); end
end
class ERBLint::LinterConfig
  def [](name); end
  def excludes_file?(filename); end
  def initialize(config = nil); end
  def self.array_of?(klass); end
  def self.to_array_of(klass); end
  def to_hash; end
  extend SmartProperties::ClassMethods
  include Anonymous_Module_1
  include SmartProperties
end
class ERBLint::LinterConfig::Error < StandardError
end
module Anonymous_Module_1
  def enabled=(value); end
  def enabled?; end
  def exclude; end
  def exclude=(value); end
end
module ERBLint::LinterRegistry
  def self.find_by_name(name); end
  def self.included(linter_class); end
  def self.linters; end
  def self.load_custom_linters(directory = nil); end
end
class ERBLint::Linter
  def add_offense(source_range, message, context = nil); end
  def clear_offenses; end
  def enabled?; end
  def excludes_file?(filename); end
  def initialize(file_loader, config); end
  def offenses; end
  def run(_processed_source); end
  def self.config_schema; end
  def self.config_schema=(arg0); end
  def self.inherited(linter); end
  def self.simple_name; end
  def self.simple_name=(arg0); end
  def self.support_autocorrect?; end
end
class ERBLint::Offense
  def ==(other); end
  def context; end
  def initialize(linter, source_range, message, context = nil); end
  def inspect; end
  def line_range; end
  def linter; end
  def message; end
  def source_range; end
end
class ERBLint::ProcessedSource
  def ast; end
  def file_content; end
  def filename; end
  def initialize(filename, file_content); end
  def parser; end
  def source_buffer; end
  def to_source_range(range); end
end
class ERBLint::RunnerConfigResolver
  def base_configs(file_loader, inherit_from); end
  def gem_config_path(gem_name, relative_config_path); end
  def resolve_inheritance(hash, file_loader); end
  def resolve_inheritance_from_gems(hash, gems); end
end
class ERBLint::RunnerConfig
  def config_hash_for_linter(klass_name); end
  def for_linter(klass); end
  def global_exclude; end
  def initialize(config = nil, file_loader = nil); end
  def linters_config; end
  def merge!(other_config); end
  def merge(other_config); end
  def resolver; end
  def self.default; end
  def to_hash; end
end
class ERBLint::RunnerConfig::Error < StandardError
end
class ERBLint::Runner
  def clear_offenses; end
  def initialize(file_loader, config); end
  def offenses; end
  def run(processed_source); end
end
module ERBLint::Utils
end
class ERBLint::Utils::OffsetCorrector
  def bound(pos); end
  def initialize(processed_source, corrector, offset, bound_range); end
  def insert_after(range, content); end
  def insert_before(range, content); end
  def range_with_offset(range); end
  def remove(range); end
  def remove_leading(range, size); end
  def remove_preceding(range, size); end
  def remove_trailing(range, size); end
  def replace(range, content); end
end
module ERBLint::Linters
end
class ERBLint::Linters::Rubocop < ERBLint::Linter
  def add_offense(rubocop_offense, offense_range, correction, offset, bound_range); end
  def autocorrect(processed_source, offense); end
  def base_configs(inherit_from); end
  def build_team; end
  def config_from_hash(hash); end
  def cop_classes; end
  def descendant_nodes(processed_source); end
  def initialize(file_loader, config); end
  def inspect_content(processed_source, erb_node); end
  def resolve_inheritance(hash, inherit_from); end
  def rubocop_processed_source(content, filename); end
  def run(processed_source); end
  def tempfile_from(filename, content); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::Rubocop::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_2
end
module Anonymous_Module_2
  def only; end
  def only=(value); end
  def rubocop_config; end
  def rubocop_config=(value); end
end
class ERBLint::Linters::RubocopText < ERBLint::Linters::Rubocop
  def cop_classes; end
  def descendant_nodes(parser); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::RubocopText::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_3
end
module Anonymous_Module_3
  def only; end
  def only=(value); end
  def rubocop_config; end
  def rubocop_config=(value); end
end
class ERBLint::Linters::ParserErrors < ERBLint::Linter
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::SpaceAroundErbTag < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::SpaceInHtmlTag < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def no_space(processed_source, range); end
  def process_attributes(processed_source, attributes); end
  def run(processed_source); end
  def single_space(processed_source, range, accept_newline: nil); end
  def single_space_or_newline(processed_source, range); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::ExtraNewline < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::RightTrim < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::RightTrim::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_4
end
module Anonymous_Module_4
  def enforced_style; end
  def enforced_style=(value); end
end
class ERBLint::Linters::ErbSafety < ERBLint::Linter
  def better_html_config; end
  def initialize(file_loader, config); end
  def run(processed_source); end
  def tester_classes; end
  def testers_for(parser); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::ErbSafety::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_5
end
module Anonymous_Module_5
  def better_html_config; end
  def better_html_config=(value); end
end
class ERBLint::Linters::TrailingWhitespace < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::ClosingErbTagIndent < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::SpaceIndentation < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::SpaceIndentation::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_6
end
module Anonymous_Module_6
  def tab_width; end
  def tab_width=(value); end
end
class ERBLint::Linters::HardCodedString < ERBLint::Linter
  def autocorrect(processed_source, offense); end
  def check_string?(str); end
  def corrector_i18n_load_path; end
  def find_range(node, str); end
  def load_corrector; end
  def message(string); end
  def non_text_tag?(processed_source, text_node); end
  def relevant_node(inner_node); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::HardCodedString::ForbiddenCorrector < StandardError
end
class ERBLint::Linters::HardCodedString::MissingCorrector < StandardError
end
class ERBLint::Linters::HardCodedString::MissingI18nLoadPath < StandardError
end
class ERBLint::Linters::HardCodedString::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_7
end
module Anonymous_Module_7
  def corrector; end
  def corrector=(value); end
  def i18n_load_path; end
  def i18n_load_path=(value); end
end
class ERBLint::Utils::BlockMap
  def append(code); end
  def block?(source); end
  def build_map; end
  def connections; end
  def current_pos; end
  def erb_ast; end
  def erb_nodes; end
  def extract_map_locations(node); end
  def find_connected_nodes(other); end
  def find_entry(range); end
  def find_overlapping_pair; end
  def group_overlapping_connections; end
  def initialize(processed_source); end
  def parser; end
  def rescue_locations(node); end
  def when_locations(node); end
end
class ERBLint::Utils::BlockMap::ParseError < StandardError
end
class ERBLint::Utils::BlockMap::Entry
  def contains_ruby_range?(range); end
  def erb_range; end
  def initialize(node, ruby_range); end
  def node; end
  def ruby_range; end
end
class ERBLint::Utils::BlockMap::ConnectedErbNodes
  def &(other); end
  def concat(other); end
  def include?(other); end
  def initialize(type, nodes); end
  def inspect; end
  def nodes; end
  def ordered(nodes); end
  def type; end
end
class ERBLint::Utils::RubyToERB
  def self.escape_quote(str); end
  def self.html_options_to_tag_attributes(hash_node); end
  def self.ruby_to_erb(node, indicator = nil, &block); end
end
class ERBLint::Utils::RubyToERB::Error < StandardError
end
class ERBLint::Linters::NoJavascriptTagHelper < ERBLint::Linter
  def autocorrect(processed_source, offense); end
  def correct_offense(processed_source, offense, corrector); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::NoJavascriptTagHelper::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_8
end
module Anonymous_Module_8
  def correction_style; end
  def correction_style=(value); end
end
class ERBLint::Linters::AllowedScriptType < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::AllowedScriptType::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_9
end
module Anonymous_Module_9
  def allow_blank=(value); end
  def allow_blank?; end
  def allowed_types; end
  def allowed_types=(value); end
  def disallow_inline_scripts=(value); end
  def disallow_inline_scripts?; end
end
class ERBLint::Linters::SelfClosingTag < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::SelfClosingTag::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_10
end
module Anonymous_Module_10
  def enforced_style; end
  def enforced_style=(value); end
end
class ERBLint::Linters::FinalNewline < ERBLint::Linter
  def autocorrect(_processed_source, offense); end
  def initialize(file_loader, config); end
  def run(processed_source); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::FinalNewline::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_11
end
module Anonymous_Module_11
  def present=(value); end
  def present?; end
end
class ERBLint::Linters::DeprecatedClasses < ERBLint::Linter
  def class_name_with_loc(processed_source); end
  def generate_offenses(class_name, range); end
  def initialize(file_loader, config); end
  def process_nested_offenses(source:, offset:, parent_source:); end
  def run(processed_source); end
  def script_tags(processed_source); end
  def tag_nodes(processed_source); end
  def tags(processed_source); end
  def text_tags_content(processed_source); end
  def violated_rules(class_name); end
  include ERBLint::LinterRegistry
end
class ERBLint::Linters::DeprecatedClasses::RuleSet
  extend SmartProperties::ClassMethods
  include Anonymous_Module_12
  include SmartProperties
end
module Anonymous_Module_12
  def deprecated; end
  def deprecated=(value); end
  def suggestion; end
  def suggestion=(value); end
end
class ERBLint::Linters::DeprecatedClasses::ConfigSchema < ERBLint::LinterConfig
  include Anonymous_Module_13
end
module Anonymous_Module_13
  def addendum; end
  def addendum=(value); end
  def rule_set; end
  def rule_set=(value); end
end
