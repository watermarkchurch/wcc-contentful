# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/httplog/all/httplog.rbi
#
# httplog-1.3.2
module HttpLog
  def self.call(options = nil); end
  def self.colorize(msg); end
  def self.config; end
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure; end
  def self.hash_classes; end
  def self.log(msg); end
  def self.log_benchmark(seconds); end
  def self.log_body(body, encoding = nil, content_type = nil); end
  def self.log_compact(method, uri, status, seconds); end
  def self.log_connection(host, port = nil); end
  def self.log_data(data); end
  def self.log_data_lines(data); end
  def self.log_headers(headers = nil); end
  def self.log_json(data = nil); end
  def self.log_request(method, uri); end
  def self.log_status(status); end
  def self.masked(msg, key = nil); end
  def self.parse_body(body, encoding, content_type); end
  def self.prefix; end
  def self.reset!; end
  def self.string_classes; end
  def self.text_based?(content_type); end
  def self.transform_response_code(response_code_name); end
  def self.url_approved?(url); end
  def self.utf_encoded(data, content_type = nil); end
end
class HttpLog::Configuration
  def color; end
  def color=(arg0); end
  def compact_log; end
  def compact_log=(arg0); end
  def enabled; end
  def enabled=(arg0); end
  def filter_parameters; end
  def filter_parameters=(arg0); end
  def initialize; end
  def json_log; end
  def json_log=(arg0); end
  def log_benchmark; end
  def log_benchmark=(arg0); end
  def log_connect; end
  def log_connect=(arg0); end
  def log_data; end
  def log_data=(arg0); end
  def log_headers; end
  def log_headers=(arg0); end
  def log_request; end
  def log_request=(arg0); end
  def log_response; end
  def log_response=(arg0); end
  def log_status; end
  def log_status=(arg0); end
  def logger; end
  def logger=(arg0); end
  def logger_method; end
  def logger_method=(arg0); end
  def prefix; end
  def prefix=(arg0); end
  def prefix_data_lines; end
  def prefix_data_lines=(arg0); end
  def prefix_line_numbers; end
  def prefix_line_numbers=(arg0); end
  def prefix_response_lines; end
  def prefix_response_lines=(arg0); end
  def severity; end
  def severity=(arg0); end
  def url_blacklist_pattern; end
  def url_blacklist_pattern=(arg0); end
  def url_whitelist_pattern; end
  def url_whitelist_pattern=(arg0); end
end
class HttpLog::BodyParsingError < StandardError
end
module Net
end
class Net::HTTP < Net::Protocol
  def orig_connect; end
  def orig_request(req, body = nil, &block); end
end
module HTTP
end
class HTTP::Client
  def orig_perform(req, options); end
end
class HTTP::Connection
  def orig_initialize(req, options); end
end
