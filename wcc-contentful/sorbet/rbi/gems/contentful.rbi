# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/contentful/all/contentful.rbi
#
# contentful-2.6.0
module Contentful
end
module Contentful::Support
  def self.includes_from_response(json, raw = nil); end
  def self.link?(value); end
  def self.link_array?(value); end
  def self.resource_for_link(link, includes); end
  def self.snakify(object, skip = nil); end
  def self.unresolvable?(value, errors); end
end
class Contentful::Request
  def absolute?; end
  def client; end
  def copy; end
  def endpoint; end
  def get; end
  def id; end
  def initialize(client, endpoint, query = nil, id = nil); end
  def normalize_query(query); end
  def query; end
  def type; end
  def url; end
end
class Contentful::Error < StandardError
  def additional_info; end
  def additional_info?; end
  def best_available_message; end
  def default_error_message; end
  def handle_details(details); end
  def initialize(response); end
  def response; end
  def self.[](error_status_code); end
end
class Contentful::BadRequest < Contentful::Error
  def default_error_message; end
  def handle_details(details); end
end
class Contentful::Unauthorized < Contentful::Error
  def default_error_message; end
end
class Contentful::AccessDenied < Contentful::Error
  def default_error_message; end
  def handle_details(details); end
end
class Contentful::NotFound < Contentful::Error
  def default_error_message; end
  def handle_details(details); end
end
class Contentful::RateLimitExceeded < Contentful::Error
  def additional_info; end
  def additional_info?; end
  def default_error_message; end
  def reset_time; end
  def reset_time?; end
end
class Contentful::ServerError < Contentful::Error
  def default_error_message; end
end
class Contentful::BadGateway < Contentful::Error
  def default_error_message; end
end
class Contentful::ServiceUnavailable < Contentful::Error
  def default_error_message; end
end
class Contentful::UnparsableJson < Contentful::Error
  def default_error_message; end
end
class Contentful::UnparsableResource < StandardError
end
class Contentful::Response
  def error_message; end
  def error_object?; end
  def initialize(raw, request = nil); end
  def invalid_response?; end
  def load_json; end
  def no_content_response?; end
  def object; end
  def parse_contentful_error; end
  def parse_http_error; end
  def parse_json!; end
  def raw; end
  def request; end
  def service_unavailable_error; end
  def service_unavailable_response?; end
  def status; end
  def unzip_response(response); end
  def valid_http_response?; end
end
class Contentful::BaseResource
  def ==(other); end
  def build_link(item); end
  def default_locale; end
  def define_sys_methods!; end
  def hydrate_sys; end
  def initialize(item, configuration = nil, _localized = nil, _includes = nil, entries = nil, depth = nil, _errors = nil); end
  def inspect; end
  def internal_resource_locale; end
  def marshal_dump; end
  def marshal_load(raw_object); end
  def raw; end
  def reload(client = nil); end
  def repr_name; end
  def sys; end
end
class Contentful::Locale < Contentful::BaseResource
  def code; end
  def default; end
  def fallback_code; end
  def initialize(item, *arg1); end
  def name; end
end
class Contentful::Space < Contentful::BaseResource
  def initialize(item, *arg1); end
  def locales; end
  def name; end
  def reload(client = nil); end
end
class Contentful::Location
  def initialize(json); end
  def lat; end
  def latitude; end
  def lon; end
  def longitude; end
end
class Contentful::BaseCoercion
  def coerce; end
  def initialize(value, options = nil); end
  def options; end
  def value; end
end
class Contentful::StringCoercion < Contentful::BaseCoercion
  def coerce; end
end
class Contentful::TextCoercion < Contentful::StringCoercion
end
class Contentful::SymbolCoercion < Contentful::StringCoercion
end
class Contentful::IntegerCoercion < Contentful::BaseCoercion
  def coerce; end
end
class Contentful::FloatCoercion < Contentful::BaseCoercion
  def coerce; end
end
class Contentful::BooleanCoercion < Contentful::BaseCoercion
  def coerce; end
end
class Contentful::DateCoercion < Contentful::BaseCoercion
  def coerce; end
end
class Contentful::LocationCoercion < Contentful::BaseCoercion
  def coerce; end
end
class Contentful::ObjectCoercion < Contentful::BaseCoercion
  def coerce; end
end
class Contentful::LinkCoercion < Contentful::BaseCoercion
end
class Contentful::ArrayCoercion < Contentful::BaseCoercion
  def coerce; end
end
class Contentful::Field
  def coerce(value); end
  def id; end
  def initialize(json); end
  def items; end
  def link_type; end
  def localized; end
  def name; end
  def raw; end
  def required; end
  def type; end
end
class Contentful::ContentType < Contentful::BaseResource
  def description; end
  def displayField; end
  def display_field; end
  def field_for(field_id); end
  def fields; end
  def initialize(item, *arg1); end
  def name; end
  def repr_name; end
end
class Contentful::FieldsResource < Contentful::BaseResource
  def coerce(_field_id, value, _includes, _errors, _entries); end
  def define_fields_methods!; end
  def fields(wanted_locale = nil); end
  def fields_with_locales; end
  def hydrate_fields(includes, entries, errors); end
  def hydrate_localized_fields(includes, errors, entries); end
  def hydrate_nonlocalized_fields(includes, errors, entries); end
  def initialize(item, _configuration, localized = nil, includes = nil, entries = nil, depth = nil, errors = nil); end
  def locales; end
  def localized; end
  def marshal_dump; end
  def marshal_load(raw_object); end
  def raw_with_links; end
end
class Contentful::ContentTypeCache
  def self.cache; end
  def self.cache_get(space_id, content_type_id); end
  def self.cache_set(space_id, content_type_id, klass); end
  def self.clear!; end
end
module Contentful::ResourceReferences
  def incoming_references(client = nil, query = nil); end
end
class Contentful::Entry < Contentful::FieldsResource
  def build_nested_resource(value, includes, entries); end
  def coerce(field_id, value, includes, errors, entries = nil); end
  def coerce_link_array(value, includes, errors, entries); end
  def entry?; end
  def known_contentful_object?(object); end
  def known_link?(name); end
  def repr_name; end
  def resolve_include(resource, includes, entries); end
  include Contentful::ResourceReferences
end
class Contentful::File
  def define_fields!(json); end
  def initialize(json, configuration); end
end
class Contentful::Asset < Contentful::FieldsResource
  def build_query(options); end
  def create_files!; end
  def define_asset_methods!; end
  def image_url(options = nil); end
  def initialize(*arg0); end
  def inspect; end
  def marshal_dump; end
  def marshal_load(raw_object); end
  def url(options = nil); end
  include Contentful::ResourceReferences
end
module Contentful::ArrayLike
  def [](index); end
  def array?; end
  def each(&block); end
  def each_item(&block); end
  def empty?; end
  def last; end
  def length; end
  def size; end
  include Enumerable
end
class Contentful::Array < Contentful::BaseResource
  def endpoint; end
  def initialize(item = nil, configuration = nil, endpoint = nil, *arg3); end
  def inspect; end
  def items; end
  def limit; end
  def marshal_dump; end
  def marshal_load(raw_object); end
  def next_page(client = nil); end
  def skip; end
  def total; end
  include Contentful::ArrayLike
end
class Contentful::Link < Contentful::BaseResource
  def resolve(client, query = nil); end
end
class Contentful::DeletedEntry < Contentful::BaseResource
end
class Contentful::DeletedAsset < Contentful::BaseResource
end
class Contentful::ResourceBuilder
  def array?; end
  def build_array; end
  def build_item(item, includes = nil, errors = nil); end
  def build_single; end
  def default_entry_mapping; end
  def default_locale; end
  def default_resource_mapping; end
  def depth; end
  def endpoint; end
  def entry_mapping; end
  def fetch_array_class; end
  def fetch_custom_resource_class(item); end
  def fetch_custom_resource_mapping(item, type, default_class); end
  def fetch_errors; end
  def fetch_includes; end
  def initialize(json, configuration = nil, localized = nil, depth = nil, endpoint = nil); end
  def json; end
  def localized; end
  def localized?; end
  def resource; end
  def resource_class(item); end
  def resource_mapping; end
  def run; end
  def sync?; end
end
class Contentful::SyncPage < Contentful::BaseResource
  def initialize(item, configuration = nil, *arg2); end
  def inspect; end
  def items; end
  def last_page?; end
  def next_page; end
  def next_page?; end
  def next_page_url; end
  def next_sync_url; end
  def sync; end
  include Contentful::ArrayLike
end
class Contentful::Sync
  def completed?; end
  def each_item(&block); end
  def each_page; end
  def fetch_page(options_or_url); end
  def first_page; end
  def get(options_or_url); end
  def initialize(client, options_or_url); end
  def link_page_to_sync!(page); end
  def next_sync_url; end
  def update_sync_state_from!(page); end
end
class Contentful::Client
  def app_info; end
  def asset(id, query = nil); end
  def assets(query = nil); end
  def base_url; end
  def configuration; end
  def content_type(id, query = nil); end
  def content_types(query = nil); end
  def contentful_user_agent; end
  def default_configuration; end
  def do_build_resource(response); end
  def entries(query = nil); end
  def entry(id, query = nil); end
  def environment_url(path); end
  def fail_response(response); end
  def format_user_agent_header(key, values); end
  def get(request, build_resource = nil); end
  def initialize(given_configuration = nil); end
  def integration_info; end
  def locales(query = nil); end
  def logger; end
  def normalize_configuration!; end
  def normalize_select!(query); end
  def os_info; end
  def platform_info; end
  def proxy; end
  def proxy_params; end
  def register_dynamic_entry(key, klass); end
  def request_headers; end
  def request_query(query); end
  def retry_message(retries_left, reset_time); end
  def run_request(request); end
  def sdk_info; end
  def self.get_http(url, query, headers = nil, proxy = nil); end
  def setup_logger; end
  def should_retry(retries_left, reset_time, max_wait); end
  def space(query = nil); end
  def sync(options = nil); end
  def update_dynamic_entry_cache!; end
  def validate_configuration!; end
end
