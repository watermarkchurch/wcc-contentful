# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/better_html/all/better_html.rbi
#
# better_html-1.0.14
module BetterHtml
  def self.config; end
  def self.config=(new_config); end
  def self.configure; end
end
class BetterHtml::Config
  def javascript_attribute_name?(name); end
  def javascript_safe_method?(name); end
  def lodash_safe_javascript_expression?(code); end
  extend SmartProperties::ClassMethods
  include Anonymous_Module_15
  include SmartProperties
end
module Anonymous_Module_15
  def allow_single_quoted_attributes; end
  def allow_single_quoted_attributes=(value); end
  def allow_unquoted_attributes; end
  def allow_unquoted_attributes=(value); end
  def javascript_attribute_names; end
  def javascript_attribute_names=(value); end
  def javascript_safe_methods; end
  def javascript_safe_methods=(value); end
  def lodash_safe_javascript_expression; end
  def lodash_safe_javascript_expression=(value); end
  def partial_attribute_name_pattern; end
  def partial_attribute_name_pattern=(value); end
  def partial_tag_name_pattern; end
  def partial_tag_name_pattern=(value); end
  def template_exclusion_filter; end
  def template_exclusion_filter=(value); end
end
module BetterHtml::Helpers
  def html_attributes(args); end
end
class BetterHtml::InterpolatorError < RuntimeError
end
class BetterHtml::DontInterpolateHere < BetterHtml::InterpolatorError
end
class BetterHtml::UnsafeHtmlError < BetterHtml::InterpolatorError
end
class BetterHtml::HtmlError < RuntimeError
end
class BetterHtml::Errors < Array
  def add(arg0); end
end
class BetterHtml::HtmlAttributes
  def initialize(data); end
  def to_s; end
end
module BetterHtml::Tokenizer
end
class BetterHtml::Tokenizer::Token
  def initialize(type:, loc:); end
  def inspect; end
  def loc; end
  def type; end
end
class BetterHtml::Tokenizer::Location < Parser::Source::Range
  def adjust(begin_pos: nil, end_pos: nil); end
  def begin; end
  def end; end
  def initialize(buffer, begin_pos, end_pos); end
  def line_range; end
  def line_source_with_underline; end
  def offset(offset); end
  def range; end
  def resize(new_size); end
  def start_column; end
  def start_line; end
  def stop_column; end
  def stop_line; end
  def with(begin_pos: nil, end_pos: nil); end
end
class BetterHtml::Tokenizer::BaseErb < Erubi::Engine
  def add_code(code); end
  def add_erb_tokens(ltrim, indicator, code, rtrim); end
  def add_expression(indicator, code); end
  def add_token(type, begin_pos, end_pos); end
  def append(text); end
  def current_position; end
  def initialize(buffer); end
  def tokens; end
end
class BetterHtml::Tokenizer::JavascriptErb < BetterHtml::Tokenizer::BaseErb
  def add_text(text); end
end
class BetterHtml::Tokenizer::HtmlErb < BetterHtml::Tokenizer::BaseErb
  def add_text(text); end
  def append(text); end
  def current_position; end
  def initialize(buffer); end
  def parser; end
end
class BetterHtml::Tokenizer::HtmlLodash
  def add_lodash_tokens(indicator, code); end
  def add_text(text); end
  def add_token(type, begin_pos: nil, end_pos: nil); end
  def initialize(buffer); end
  def lodash_escape; end
  def lodash_escape=(obj); end
  def lodash_evaluate; end
  def lodash_evaluate=(obj); end
  def lodash_interpolate; end
  def lodash_interpolate=(obj); end
  def parser; end
  def scan!; end
  def scan_pattern; end
  def self.lodash_escape; end
  def self.lodash_escape=(obj); end
  def self.lodash_evaluate; end
  def self.lodash_evaluate=(obj); end
  def self.lodash_interpolate; end
  def self.lodash_interpolate=(obj); end
  def tokens; end
end
class BetterHtml::Tokenizer::TokenArray
  def any?; end
  def current; end
  def empty?; end
  def initialize(list); end
  def last; end
  def pop; end
  def shift; end
  def size; end
  def trim(type); end
end
module BetterHtml::AST
end
class BetterHtml::AST::Iterator
  def initialize(types, &block); end
  def self.descendants(root_node, type); end
  def traverse(node); end
  def traverse_all(nodes); end
end
class BetterHtml::AST::Node < AST::Node
  def descendants(*types); end
  def loc; end
  def location; end
end
class BetterHtml::Parser
  def ast; end
  def build_attribute_name_node(tokens); end
  def build_attribute_node(tokens); end
  def build_attribute_value_node(tokens); end
  def build_cdata_node(tokens); end
  def build_comment_node(tokens); end
  def build_document_node; end
  def build_erb_node(tokens); end
  def build_interpolation_node(tokens); end
  def build_location(enumerable); end
  def build_lodash_node(tokens); end
  def build_nameless_attribute_node(tokens); end
  def build_node(type, tokens, pre: nil, post: nil); end
  def build_tag_attributes_node(tokens); end
  def build_tag_name_node(tokens); end
  def build_tag_node(tokens); end
  def build_text_node(tokens); end
  def empty_location; end
  def initialize(buffer, template_language: nil); end
  def inspect; end
  def nodes_with_type(*type); end
  def parser_errors; end
  def shift_all(tokens, *types); end
  def shift_all_with_interpolation(tokens, *types); end
  def shift_between(tokens, start_type, end_type); end
  def shift_between_with_interpolation(tokens, start_type, end_type); end
  def shift_single(tokens, *types); end
  def shift_until(tokens, *types); end
  def shift_until_with_interpolation(tokens, *types); end
  def template_language; end
  def wrap_token(object); end
  def wrap_tokens(enumerable); end
end
class BetterHtml::Parser::Error < BetterHtml::HtmlError
  def initialize(message, location:); end
  def loc; end
  def location; end
end
module BetterHtml::TestHelper
end
class BetterHtml::TestHelper::SafetyError < BetterHtml::InterpolatorError
  def initialize(message, location:); end
  def location; end
end
module BetterHtml::Tree
end
class BetterHtml::Tree::Attribute
  def equal_node; end
  def erb?; end
  def initialize(node); end
  def loc; end
  def name; end
  def name_node; end
  def node; end
  def self.from_node(node); end
  def value; end
  def value_node; end
end
class BetterHtml::Tree::AttributesList
  def [](name); end
  def each(&block); end
  def initialize(list); end
  def self.from_nodes(nodes); end
end
class BetterHtml::Tree::Tag
  def attributes; end
  def attributes_node; end
  def closing?; end
  def end_solidus; end
  def initialize(node); end
  def loc; end
  def name; end
  def name_node; end
  def node; end
  def self.from_node(node); end
  def self_closing?; end
  def start_solidus; end
end
module BetterHtml::TestHelper::SafeErb
end
class BetterHtml::TestHelper::SafeErb::Base
  def add_error(message, location:); end
  def ast; end
  def erb_nodes(root_node); end
  def errors; end
  def initialize(parser, config: nil); end
  def script_tags; end
end
class BetterHtml::TestHelper::SafeErb::NoStatements < BetterHtml::TestHelper::SafeErb::Base
  def no_statements(node); end
  def validate; end
end
class BetterHtml::TestHelper::SafeErb::AllowedScriptType < BetterHtml::TestHelper::SafeErb::Base
  def validate; end
  def validate_type(tag); end
end
class BetterHtml::TestHelper::RubyNode < BetterHtml::AST::Node
  def arguments; end
  def begin?; end
  def child_nodes; end
  def hash?; end
  def method_call?; end
  def method_name; end
  def method_name?(name); end
  def node?(current); end
  def pair?; end
  def receiver; end
  def return_values; end
  def self.parse(code); end
  def static_return_value?; end
  def static_value?; end
  def type?(wanted_type); end
end
class BetterHtml::TestHelper::RubyNode::ParseError < RuntimeError
end
class BetterHtml::TestHelper::RubyNode::Builder < Parser::Builders::Default
  def n(type, children, source_map); end
end
class BetterHtml::TestHelper::SafeErb::NoJavascriptTagHelper < BetterHtml::TestHelper::SafeErb::Base
  def no_javascript_tag_helper(node); end
  def validate; end
end
class BetterHtml::TestHelper::SafeErb::TagInterpolation < BetterHtml::TestHelper::SafeErb::Base
  def handle_missing_safe_wrapper(parent_node, ruby_node, attr_name); end
  def nested_location(parent_node, ruby_node); end
  def no_html_tag?(node); end
  def no_unsafe_calls(parent_node, ruby_node); end
  def validate; end
  def validate_attribute(attribute); end
  def validate_ruby_helper(parent_node, ruby_node); end
  def validate_ruby_helper_hash_entry(parent_node, ruby_node, key_prefix, key_node, value_node); end
  def validate_ruby_helper_hash_value(parent_node, ruby_node, attr_name, hash_value); end
  def validate_tag_interpolation(parent_node, ruby_node, attr_name); end
  def validate_text_node(text_node); end
end
class BetterHtml::TestHelper::SafeErb::ScriptInterpolation < BetterHtml::TestHelper::SafeErb::Base
  def validate; end
  def validate_script(node); end
  def validate_script_interpolation(parent_node, ruby_node); end
end
module BetterHtml::TestHelper::SafeErbTester
  def assert_erb_safety(data, **options); end
end
