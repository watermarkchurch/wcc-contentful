# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/wisper/all/wisper.rbi
#
# wisper-2.0.0
module Wisper
  def self.clear; end
  def self.configuration; end
  def self.configure; end
  def self.publisher; end
  def self.setup; end
  def self.subscribe(*args, &block); end
  def self.unsubscribe(*listeners); end
end
class Wisper::Configuration
  def broadcaster(key, broadcaster); end
  def broadcasters; end
  def default_prefix=(value); end
  def initialize; end
end
class Wisper::Configuration::Broadcasters
  def [](*args, &block); end
  def []=(*args, &block); end
  def clear(*args, &block); end
  def empty?(*args, &block); end
  def fetch(key); end
  def include?(*args, &block); end
  def initialize; end
  def keys(*args, &block); end
  def to_h(*args, &block); end
  extend Forwardable
end
module Wisper::Publisher
  def broadcast(event, *args); end
  def clean_event(event); end
  def global_registrations; end
  def listeners; end
  def local_registrations; end
  def on(*events, &block); end
  def publish(event, *args); end
  def registrations; end
  def self.included(base); end
  def subscribe(listener, options = nil); end
  def temporary_registrations; end
end
module Wisper::Publisher::ClassMethods
  def subscribe(listener, options = nil); end
end
module Wisper::ValueObjects
end
class Wisper::ValueObjects::Prefix < String
  def default; end
  def initialize(value = nil); end
  def self.default; end
  def self.default=(arg0); end
end
class Wisper::ValueObjects::Events
  def appropriate_method; end
  def include?(event); end
  def initialize(list); end
  def list; end
  def methods; end
  def recognized_type; end
  def type_not_recognized; end
end
class Wisper::Registration
  def initialize(listener, options); end
  def listener; end
  def on; end
  def should_broadcast?(event); end
end
class Wisper::ObjectRegistration < Wisper::Registration
  def allowed_classes; end
  def broadcast(event, publisher, *args); end
  def broadcaster; end
  def configuration; end
  def initialize(listener, options); end
  def map_broadcaster(value); end
  def map_event_to_method(event); end
  def prefix; end
  def publisher_in_scope?(publisher); end
  def with; end
end
class Wisper::BlockRegistration < Wisper::Registration
  def broadcast(event, publisher, *args); end
end
class Wisper::GlobalListeners
  def clear; end
  def initialize; end
  def listeners; end
  def registrations; end
  def self.allocate; end
  def self.clear; end
  def self.instance; end
  def self.listeners; end
  def self.new(*arg0); end
  def self.registrations; end
  def self.subscribe(*listeners); end
  def self.unsubscribe(*listeners); end
  def subscribe(*listeners); end
  def unsubscribe(*listeners); end
  def with_mutex; end
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Wisper::TemporaryListeners
  def clear; end
  def key; end
  def registrations; end
  def self.registrations; end
  def self.subscribe(*listeners, &block); end
  def subscribe(*listeners, &block); end
end
module Wisper::Broadcasters
end
class Wisper::Broadcasters::SendBroadcaster
  def broadcast(listener, publisher, event, args); end
end
class Wisper::Broadcasters::LoggerBroadcaster
  def args_info(args); end
  def broadcast(listener, publisher, event, args); end
  def initialize(logger, broadcaster); end
  def name(object); end
end
